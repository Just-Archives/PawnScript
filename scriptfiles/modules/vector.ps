/*
*
*  	PawnScript
*
* 	Test File
*   Brace Inc.
*
*
*/

std::writeln("vector.ps loaded");

vector<324>vectorname; // 	An initial size can be a completely random number,
// 							because the size updates dynamically during the runtime.

// `using vector` is already in stdlib.ps
vector.add(vectorname,1);
vector.add(vectorname,312);
vector.add(vectorname,2);
new.int,vectortest=0;

console.rawout(sizeof?vectorname); // Size is changed from 324 to 3.
foreach.int,vectortest,vectorname->std::writeln("vector test #1 {vectortest}");

vector.remove(vectorname,312);

console.rawout(sizeof?vectorname); // Size is changed from 3 to 2.
foreach.int,vectortest,vectorname->std::writeln("vector test #2 {vectortest}");


namespace,vectors;
{
	vector<324>myvec;
	new.int,vectortest2=0;
}

vector.add(vectors::myvec,24);
vector.add(vectors::myvec,31);
vector.add(vectors::myvec,29);

console.rawout(sizeof?vectors::myvec); // Size is changed from 324 to 3.
foreach.int,vectors::vectortest2,vectors::myvec->std::writeln("vector test #3 {vectors::vectortest2}");

vector.remove(vectors::myvec,24);

console.rawout(sizeof?vectors::myvec); // Size is changed from 3 to 2.
foreach.int,vectors::vectortest2,vectors::myvec->std::writeln("vector test #4 {vectors::vectortest2}");

//new.int,t?stvar$=0;
//#emit:lol,1;
//#emit:addrset,NINJAGOOOO@@j;
new.int,hey=9;
#emit:addrset,addressof?hey; // Store the ADDRESS of 'hey' into cur and sec registers
#emit:const.alt,2; // Store 2 into alternate register
#emit:load.pri; // Store the VALUE of 'hey' into primary register
#emit:add; // pri = pri+alt
#emit:stor.pri; // store the value of primary register into the address found in cur and sec registers.
// Alternate way of updating the value is just by using the `vlset` instruction
console.rawout.log(hey); // Raw output 


#emit:const.pri,1; // Set the value of PRI to 1 (which is var memory sector id)
#emit:sctrl,2; // Set the sector to 1
#emit:lctrl,4; // Get the next free cell id
#emit:sctrl,1; // Set that cell id.
#emit:push; // Push that address to the stack.
#emit:csnm,temporaryvar; // Name it that because it's name is not in the stack, so we will pop it later.
#emit:dtyp,1; // Make it an integer.
#emit:vlset,300; // Give it a value of 300.
std::writeln("temporaryvar is {temporaryvar}"); // Print the value
#emit:pop; // Invalidate the current address.
// Optional: Reset the registers.
#emit:zero.pri;
#emit:zero.alt;
std::writeln("temporaryvar is {temporaryvar}"); // We will see "temporaryvar is null"